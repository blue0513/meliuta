#!/usr/bin/env ruby
#
# Get all video information for the channel
#
# Require: Google Cloud Platform account (YouTube Data API v3 enabled)

require 'net/http'
require 'uri'
require 'json'

if ARGV.size != 1
  STDERR.puts "Usage: ./#{File.basename(__FILE__)} Channel-URL..."
  STDERR.puts ""
  STDERR.puts "Environment variables:"
  STDERR.puts " GCP_API_KEY   Required. Set the API key generated by Google Cloud Platform."
  exit
end

if !ENV['GCP_API_KEY']
  STDERR.puts "Set GCP_API_KEY"
  exit
end

API_KEY = ENV['GCP_API_KEY']

ARGV.each { |channel_id|
  filter_param = nil
  if channel_id =~ /channel\/([^&\/]+)/
    filter_param = "id=#{$1}#{$2}"
  elsif channel_id =~ /user\/([^&\/]+)/
    filter_param = "forUsername=#{$1}"
  elsif channel_id =~ /c\/([^&\/]+)/
    throw "Custom URL is not supported. Please include channel ID (channel/<channelId>) or user ID (user/<username>)"
  else
    filter_param = "id=#{channel_id}"
  end

  STDERR.puts "#{channel_id}"
  STDERR.puts "Set filter parameter: #{filter_param}"

  # Channels
  response = Net::HTTP.get_response(URI.parse("https://www.googleapis.com/youtube/v3/channels?key=#{API_KEY}&part=id,snippet,contentDetails&#{filter_param}&maxResults=50"))
  if response.code.to_i != 200
    throw "API response error: HTTP #{response.code} #{response.message} (#{response.body})"
  end
  channel = JSON.parse(response.body)["items"].first
  uploads_playlist = channel.dig("contentDetails", "relatedPlaylists", "uploads")

  STDERR.puts "Channel name: #{channel.dig("snippet", "title")}"
  STDERR.puts "Retreive videos"

  playlist_items = []
  token = nil
  (1..).each { |i|
    STDERR.print "."
    response = Net::HTTP.get_response(URI.parse("https://www.googleapis.com/youtube/v3/playlistItems?key=#{API_KEY}&part=id,snippet,contentDetails,status&playlistId=#{uploads_playlist}&maxResults=50" + (token ? "&pageToken=#{token}" : "")))
    if response.code.to_i != 200
      throw "API response error: HTTP #{response.code} #{response.message} (#{response.body})"
    end
    json = JSON.parse(response.body)
    playlist_items += json["items"]

    if json["nextPageToken"]
      token = json["nextPageToken"]
    else
      break
    end
  }

  puts ({ channel: channel, playlist_items: playlist_items }).to_json
}

